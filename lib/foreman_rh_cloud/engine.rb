require 'katello'
require 'foreman_ansible'

module ForemanRhCloud
  class Engine < ::Rails::Engine
    engine_name 'foreman_rh_cloud'

    def self.register_scheduled_task(task_class, cronline)
      ForemanTasks::RecurringLogic.transaction(isolation: :serializable) do
        return if ForemanTasks::RecurringLogic.joins(:tasks)
                  .merge(ForemanTasks::Task.where(label: task_class.name))
                  .exists?

        User.as_anonymous_admin do
          recurring_logic = ForemanTasks::RecurringLogic.new_from_cronline(cronline)
          recurring_logic.save!
          recurring_logic.start(task_class)
        end
      end
    rescue ActiveRecord::TransactionIsolationError
    end

    config.autoload_paths += Dir["#{config.root}/lib"]

    config.eager_load_paths += Dir["#{config.root}/lib"]

    # Add any db migrations
    initializer 'foreman_rh_cloud.load_app_instance_data' do |app|
      ForemanRhCloud::Engine.paths['db/migrate'].existent.each do |path|
        app.config.paths['db/migrate'] << path
      end
    end

    initializer 'foreman_rh_cloud.register_plugin', :before => :finisher_hook do |app|
      app.reloader.to_prepare do
        ForemanRhCloud::Plugin.register

        ::Katello::UINotifications::Subscriptions::ManifestImportSuccess.include ForemanInventoryUpload::Notifications::ManifestImportSuccessNotificationOverride if defined?(Katello)

        ::Host::Managed.include RhCloudHost

        ::Katello::Api::Rhsm::CandlepinDynflowProxyController.include InsightsCloud::PackageProfileUploadExtensions
      end
    end

    initializer "foreman_rh_cloud.add_rabl_view_path" do
      Rabl.configure do |config|
        config.view_paths << ForemanRhCloud::Engine.root.join('app', 'views')
      end
    end

    initializer 'foreman_rh_cloud.register_scheduled_tasks', :before => :finisher_hook do |_app|
      # skip database manipulations while tables do not exist, like in migrations
      # skip object creation when admin user is not present, for example in test DB
      if ActiveRecord::Base.connection.data_source_exists?(ForemanTasks::Task.table_name) && User.unscoped.find_by_login(User::ANONYMOUS_ADMIN).present?
        ::ForemanTasks.dynflow.config.on_init(false) do |world|
          ForemanRhCloud::Engine.register_scheduled_task(ForemanInventoryUpload::Async::GenerateAllReportsJob, '0 0 * * *')
          ForemanRhCloud::Engine.register_scheduled_task(InventorySync::Async::InventoryScheduledSync, '0 0 * * *')
          ForemanRhCloud::Engine.register_scheduled_task(InsightsCloud::Async::InsightsScheduledSync, '0 0 * * *')
          ForemanRhCloud::Engine.register_scheduled_task(InsightsCloud::Async::InsightsClientStatusAging, '0 0 * * *')
        end
      end
    rescue ActiveRecord::NoDatabaseError
    end

    config.to_prepare do
      RemoteExecutionFeature.register(
        :rh_cloud_remediate_hosts,
        N_('Apply Insights recommendations'),
        description: N_('Run remediation playbook generated by Insights'),
        host_action_button: false
      )
      RemoteExecutionFeature.register(
        :rh_cloud_connector_run_playbook,
        N_('Run RH Cloud playbook'),
        description: N_('Run playbook generated by Red Hat remediations app'),
        host_action_button: false,
        provided_inputs: ['playbook_url', 'report_url', 'correlation_id', 'report_interval']
      )
      RemoteExecutionFeature.register(
        :ansible_configure_cloud_connector,
        N_('Configure Cloud Connector on given hosts'),
        :description => N_('Configure Cloud Connector on given hosts'),
        :proxy_selector_override => ::RemoteExecutionProxySelector::INTERNAL_PROXY
      )
    end

    # Ideally this code belongs to an initializer. The problem is that Katello controllers are not initialized completely until after the end of the to_prepare blocks
    # This means I can patch the controller only in the after_initialize block that is promised to run after the to_prepare
    # initializer 'foreman_rh_cloud.allow_smart_proxy_actions', :before => :finisher_hook, :after => 'katello.register_plugin'  do |_app|
    # end
    config.after_initialize do
      # skip overrides in migrations, since the controller initialization depends on tables existense
      if defined?(Katello) && !Foreman.in_setup_db_rake?
        Katello::Api::V2::OrganizationsController.include Foreman::Controller::SmartProxyAuth
        # patch the callbacks order for :download_debug_certificate, since local_find_taxonomy has to run after the user is already initialized
        Katello::Api::V2::OrganizationsController.skip_before_action(:local_find_taxonomy, only: :download_debug_certificate)
        Katello::Api::V2::OrganizationsController.add_smart_proxy_filters(
          [:index, :download_debug_certificate],
          features: ForemanRhCloud.on_prem_smart_proxy_features
        )
        Katello::Api::V2::OrganizationsController.before_action(:local_find_taxonomy, only: :download_debug_certificate)

        Katello::Api::V2::RepositoriesController.include Foreman::Controller::SmartProxyAuth
        # patch the callbacks order for :index, since find_product has to run after the user is already initialized
        Katello::Api::V2::RepositoriesController.skip_before_action(:find_product, only: :index)
        Katello::Api::V2::RepositoriesController.skip_before_action(:find_optional_organization, only: :index)
        Katello::Api::V2::RepositoriesController.add_smart_proxy_filters(
          :index,
          features: ForemanRhCloud.on_prem_smart_proxy_features
        )
        Katello::Api::V2::RepositoriesController.before_action(:find_product, only: :index)
        Katello::Api::V2::RepositoriesController.before_action(:find_optional_organization, only: :index)
      end
    end

    rake_tasks do
      Rake::Task['db:seed'].enhance do
        ForemanRhCloud::Engine.load_seed
      end
    end
  end

  def self.with_local_advisor_engine?
    SETTINGS.dig(:foreman_rh_cloud, :use_local_advisor_engine) || false
  end

  def self.ca_cert
    # The reference to candlepin ca_cert_file can be removed
    # once the setting is dropped. Foreman 3.15 introduces
    # a single CA file that bundles all CAs.
    if ::SETTINGS.dig(:katello, :candlepin, :ca_cert_file)
      ::SETTINGS[:katello][:candlepin][:ca_cert_file]
    else
      ::SETTINGS[:ssl_ca_file]
    end
  end

  def self.on_prem_smart_proxy_features
    ['Insights']
  end
end
